// RTL-SASS
// http://jalproductions.co.uk

// $val is the value of the property
// $origin is the original position of the element


// (5) e.g. background: #FFF url(img.ext) no-repeat left center;
// (4) e.g. background: url(img.ext) no-repeat left center;
@mixin background($val) {
  @if $rtl == true {
    @if length($val) == 5 {
      @if nth($val, 4) == left {
        background: nth($val, 1) nth($val, 2) nth($val, 3) right nth($val, 5);
      } @else if nth($val, 4) == right {
        background: nth($val, 1) nth($val, 2) nth($val, 3) left nth($val, 5);
      } @else if nth($val, 4) == center {
        background: nth($val, 1) nth($val, 2) nth($val, 3) center nth($val, 5);
      } @else {
        background: nth($val, 1) nth($val, 2) nth($val, 3) nth($val, 4) * -1 nth($val, 5);
      }
    } @else if length($val) == 4 {
      @if nth($val, 3) == left {
        background: nth($val, 1) nth($val, 2) right nth($val, 4);
      } @else if nth($val, 3) == right {
        background: nth($val, 1) nth($val, 2) left nth($val, 4);
      } @else if nth($val, 3) == center {
        background: nth($val, 1) nth($val, 2) center nth($val, 4);
      } @else {
        background: nth($val, 1) nth($val, 2) nth($val, 3) * -1 nth($val, 4);
      }
    } @else {
      background: $val;
    }
  } @else {
    background: $val;
  }
}

// Note: Don't use this for sprite images!
// Actually not quite sure what this *would* be used for...
// But hey-ho, it's here anyway!
@mixin background-position($val) {
  @if $rtl {
    @if nth($val, 1) == left {
      background-position: right nth($val, 2);
    } @else if nth($val, 1) == right {
      background-position: left nth($val, 2);
    } @else if nth($val, 1) == center {
      background-position: center nth($val, 2);
    } @else {
      background-position: nth($val, 1) * -1 nth($val, 2);
    }
  } @else {
    background-position: nth($val, 1) nth($val, 2);
  }
}

@mixin border-left($val) {
  @if $rtl {
    border-right: $val;
  } @else {
    border-left: $val;
  }
}
@mixin border-right($val) {
  @if $rtl {
    border-left: $val;
  } @else {
    border-right: $val;
  }
}

@mixin border-bottom-left-radius($val) {
  @if $rtl {
    border-bottom-right-radius: $val;
  } @else {
    border-bottom-left-radius: $val;
  }
}
@mixin border-bottom-right-radius($val) {
  @if $rtl {
    border-bottom-left-radius: $val;
  } @else {
    border-bottom-right-radius: $val;
  }
}
@mixin border-top-left-radius($val) {
  @if $rtl {
    border-top-right-radius: $val;
  } @else {
    border-top-left-radius: $val;
  }
}
@mixin border-top-right-radius($val) {
  @if $rtl {
    border-top-left-radius: $val;
  } @else {
    border-top-right-radius: $val;
  }
}

@mixin clear($origin: left) {
  @if $origin == left {
    @if $rtl {
      clear: right;
    } @else {
      clear: left;
    }
  } @else {
    @if $rtl {
      clear: left;
    } @else {
      clear: right;
    }
  }
}

@mixin direction {
  @if $rtl {
    direction: rtl;
  } @else {
    direction: ltr;
  }
}

@mixin float($origin: left) {
  @if $origin == left {
    @if $rtl {
      float: right;
    } @else {
      float: left;
    }
  } @else {
    @if $rtl {
      float: left;
    } @else {
      float: right;
    }
  }
}

@mixin left($val) {
  @if $rtl {
    right: $val;
  } @else {
    left: $val;
  }
}
@mixin right($val) {
  @if $rtl {
    left: $val;
  } @else {
    right: $val;
  }
}

@mixin margin-left($val) {
  @if $rtl {
    margin-right: $val;
  } @else {
    margin-left: $val;
  }
}
@mixin margin-right($val) {
  @if $rtl {
    margin-left: $val;
  } @else {
    margin-right: $val;
  }
}

@mixin padding-left($val) {
  @if $rtl {
    padding-right: $val;
  } @else {
    padding-left: $val;
  }
}
@mixin padding-right($val) {
  @if $rtl {
    padding-left: $val;
  } @else {
    padding-right: $val;
  }
}

@mixin text-align($origin: left) {
  @if $origin == left {
    @if $rtl {
      text-align: right;
    } @else {
      text-align: left;
    }
  } @else {
    @if $rtl {
      text-align: left;
    } @else {
      text-align: right;
    }
  }
}

@mixin text-indent($val) {
  @if $rtl {
    text-indent: $val * -1;
  } @else {
    text-indent: $val;
  }
}

// For selectors which have 4 values (e.g. padding, margin)
@mixin lrswap($property, $value) {
  @if length($value) < 4 or $rtl == false {
    #{$property}: $value;
  } @else {
    @if $rtl {
      #{$property}: nth($value, 1) nth($value, 4) nth($value, 3) nth($value, 2);
    }
  }
} 

//Another method to do the same thing as above
@mixin lrswap2($property, $t, $r, $d, $l) {
  @if $rtl {
    #{$property}: $t $l $d $r;
  } @else {
    #{$property}: $t $r $d $l;
  }
}


// These include the original position within one mixin
@mixin borderlr($val, $origin: left) {
  @if $origin == left {
    @if $rtl {
      border-left: $val;
    } @else {
      border-right: $val;
    }
  } @else {
    @if $rtl {
      border-right: $val;
    } @else {
      border-left: $val;
    }
  }
}

@mixin marginlr($val, $origin: left) {
  @if $origin == left {
    @if $rtl {
      margin-left: $val;
    } @else {
      margin-right: $val;
    }
  } @else {
    @if $rtl {
      margin-right: $val;
    } @else {
      margin-left: $val;
    }
  }
}

@mixin paddinglr($val, $origin: left) {
  @if $origin == left {
    @if $rtl {
      padding-left: $val;
    } @else {
      padding-right: $val;
    }
  } @else {
    @if $rtl {
      padding-right: $val;
    } @else {
      padding-left: $val;
    }
  }
}

@mixin position-h($val, $origin: left) {
  @if $origin == left {
    @if $rtl {
      right: $val;
    } @else {
      left: $val;
    }
  } @else {
    @if $rtl {
      left: $val;
    } @else {
      right: $val;
    }
  }
}